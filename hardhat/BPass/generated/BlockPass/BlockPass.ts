// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class BatchMetadataUpdate extends ethereum.Event {
  get params(): BatchMetadataUpdate__Params {
    return new BatchMetadataUpdate__Params(this);
  }
}

export class BatchMetadataUpdate__Params {
  _event: BatchMetadataUpdate;

  constructor(event: BatchMetadataUpdate) {
    this._event = event;
  }

  get _fromTokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _toTokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class MetadataUpdate extends ethereum.Event {
  get params(): MetadataUpdate__Params {
    return new MetadataUpdate__Params(this);
  }
}

export class MetadataUpdate__Params {
  _event: MetadataUpdate;

  constructor(event: MetadataUpdate) {
    this._event = event;
  }

  get _tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class blockPassCreated extends ethereum.Event {
  get params(): blockPassCreated__Params {
    return new blockPassCreated__Params(this);
  }
}

export class blockPassCreated__Params {
  _event: blockPassCreated;

  constructor(event: blockPassCreated) {
    this._event = event;
  }

  get organizer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get creationTime(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get blockPassId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class passBooked extends ethereum.Event {
  get params(): passBooked__Params {
    return new passBooked__Params(this);
  }
}

export class passBooked__Params {
  _event: passBooked;

  constructor(event: passBooked) {
    this._event = event;
  }

  get buyer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get blockPassId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class BlockPass__allBlockPassListResultValue0Struct extends ethereum.Tuple {
  get organizer(): Address {
    return this[0].toAddress();
  }

  get metadata(): string {
    return this[1].toString();
  }

  get category(): string {
    return this[2].toString();
  }

  get blockPassId(): BigInt {
    return this[3].toBigInt();
  }

  get passesSold(): BigInt {
    return this[4].toBigInt();
  }

  get max_passes(): BigInt {
    return this[5].toBigInt();
  }

  get passPrice(): BigInt {
    return this[6].toBigInt();
  }

  get startTime(): BigInt {
    return this[7].toBigInt();
  }

  get salesEndTime(): BigInt {
    return this[8].toBigInt();
  }

  get bpEnded(): boolean {
    return this[9].toBoolean();
  }
}

export class BlockPass__blockPassListResult {
  value0: Address;
  value1: string;
  value2: string;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;
  value7: BigInt;
  value8: BigInt;
  value9: boolean;

  constructor(
    value0: Address,
    value1: string,
    value2: string,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt,
    value7: BigInt,
    value8: BigInt,
    value9: boolean,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    map.set("value2", ethereum.Value.fromString(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    map.set("value8", ethereum.Value.fromUnsignedBigInt(this.value8));
    map.set("value9", ethereum.Value.fromBoolean(this.value9));
    return map;
  }

  getOrganizer(): Address {
    return this.value0;
  }

  getMetadata(): string {
    return this.value1;
  }

  getCategory(): string {
    return this.value2;
  }

  getBlockPassId(): BigInt {
    return this.value3;
  }

  getPassesSold(): BigInt {
    return this.value4;
  }

  getMax_passes(): BigInt {
    return this.value5;
  }

  getPassPrice(): BigInt {
    return this.value6;
  }

  getStartTime(): BigInt {
    return this.value7;
  }

  getSalesEndTime(): BigInt {
    return this.value8;
  }

  getBpEnded(): boolean {
    return this.value9;
  }
}

export class BlockPass__blockPassesBookedByUserResultValue0Struct extends ethereum.Tuple {
  get organizer(): Address {
    return this[0].toAddress();
  }

  get metadata(): string {
    return this[1].toString();
  }

  get category(): string {
    return this[2].toString();
  }

  get blockPassId(): BigInt {
    return this[3].toBigInt();
  }

  get passesSold(): BigInt {
    return this[4].toBigInt();
  }

  get max_passes(): BigInt {
    return this[5].toBigInt();
  }

  get passPrice(): BigInt {
    return this[6].toBigInt();
  }

  get startTime(): BigInt {
    return this[7].toBigInt();
  }

  get salesEndTime(): BigInt {
    return this[8].toBigInt();
  }

  get bpEnded(): boolean {
    return this[9].toBoolean();
  }
}

export class BlockPass__bookedPassByUserResult {
  value0: Address;
  value1: string;
  value2: string;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;
  value7: BigInt;
  value8: BigInt;
  value9: boolean;

  constructor(
    value0: Address,
    value1: string,
    value2: string,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt,
    value7: BigInt,
    value8: BigInt,
    value9: boolean,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    map.set("value2", ethereum.Value.fromString(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    map.set("value8", ethereum.Value.fromUnsignedBigInt(this.value8));
    map.set("value9", ethereum.Value.fromBoolean(this.value9));
    return map;
  }

  getOrganizer(): Address {
    return this.value0;
  }

  getMetadata(): string {
    return this.value1;
  }

  getCategory(): string {
    return this.value2;
  }

  getBlockPassId(): BigInt {
    return this.value3;
  }

  getPassesSold(): BigInt {
    return this.value4;
  }

  getMax_passes(): BigInt {
    return this.value5;
  }

  getPassPrice(): BigInt {
    return this.value6;
  }

  getStartTime(): BigInt {
    return this.value7;
  }

  getSalesEndTime(): BigInt {
    return this.value8;
  }

  getBpEnded(): boolean {
    return this.value9;
  }
}

export class BlockPass__getByCategoryResultValue0Struct extends ethereum.Tuple {
  get organizer(): Address {
    return this[0].toAddress();
  }

  get metadata(): string {
    return this[1].toString();
  }

  get category(): string {
    return this[2].toString();
  }

  get blockPassId(): BigInt {
    return this[3].toBigInt();
  }

  get passesSold(): BigInt {
    return this[4].toBigInt();
  }

  get max_passes(): BigInt {
    return this[5].toBigInt();
  }

  get passPrice(): BigInt {
    return this[6].toBigInt();
  }

  get startTime(): BigInt {
    return this[7].toBigInt();
  }

  get salesEndTime(): BigInt {
    return this[8].toBigInt();
  }

  get bpEnded(): boolean {
    return this[9].toBoolean();
  }
}

export class BlockPass__getPassByIdResult {
  value0: Address;
  value1: string;
  value2: string;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;
  value7: BigInt;
  value8: BigInt;
  value9: boolean;

  constructor(
    value0: Address,
    value1: string,
    value2: string,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt,
    value7: BigInt,
    value8: BigInt,
    value9: boolean,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    map.set("value2", ethereum.Value.fromString(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    map.set("value8", ethereum.Value.fromUnsignedBigInt(this.value8));
    map.set("value9", ethereum.Value.fromBoolean(this.value9));
    return map;
  }

  getOrganizer(): Address {
    return this.value0;
  }

  getMetadata(): string {
    return this.value1;
  }

  getCategory(): string {
    return this.value2;
  }

  getBlockPassId(): BigInt {
    return this.value3;
  }

  getPassesSold(): BigInt {
    return this.value4;
  }

  getMax_passes(): BigInt {
    return this.value5;
  }

  getPassPrice(): BigInt {
    return this.value6;
  }

  getStartTime(): BigInt {
    return this.value7;
  }

  getSalesEndTime(): BigInt {
    return this.value8;
  }

  getBpEnded(): boolean {
    return this.value9;
  }
}

export class BlockPass extends ethereum.SmartContract {
  static bind(address: Address): BlockPass {
    return new BlockPass("BlockPass", address);
  }

  allBlockPassList(): Array<BlockPass__allBlockPassListResultValue0Struct> {
    let result = super.call(
      "allBlockPassList",
      "allBlockPassList():((address,string,string,uint256,uint256,uint256,uint256,uint256,uint256,bool)[])",
      [],
    );

    return result[0].toTupleArray<BlockPass__allBlockPassListResultValue0Struct>();
  }

  try_allBlockPassList(): ethereum.CallResult<
    Array<BlockPass__allBlockPassListResultValue0Struct>
  > {
    let result = super.tryCall(
      "allBlockPassList",
      "allBlockPassList():((address,string,string,uint256,uint256,uint256,uint256,uint256,uint256,bool)[])",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<BlockPass__allBlockPassListResultValue0Struct>(),
    );
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner),
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  blockPassList(param0: BigInt): BlockPass__blockPassListResult {
    let result = super.call(
      "blockPassList",
      "blockPassList(uint256):(address,string,string,uint256,uint256,uint256,uint256,uint256,uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return new BlockPass__blockPassListResult(
      result[0].toAddress(),
      result[1].toString(),
      result[2].toString(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBigInt(),
      result[8].toBigInt(),
      result[9].toBoolean(),
    );
  }

  try_blockPassList(
    param0: BigInt,
  ): ethereum.CallResult<BlockPass__blockPassListResult> {
    let result = super.tryCall(
      "blockPassList",
      "blockPassList(uint256):(address,string,string,uint256,uint256,uint256,uint256,uint256,uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new BlockPass__blockPassListResult(
        value[0].toAddress(),
        value[1].toString(),
        value[2].toString(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBigInt(),
        value[8].toBigInt(),
        value[9].toBoolean(),
      ),
    );
  }

  blockPassesBookedByUser(
    _user: Address,
  ): Array<BlockPass__blockPassesBookedByUserResultValue0Struct> {
    let result = super.call(
      "blockPassesBookedByUser",
      "blockPassesBookedByUser(address):((address,string,string,uint256,uint256,uint256,uint256,uint256,uint256,bool)[])",
      [ethereum.Value.fromAddress(_user)],
    );

    return result[0].toTupleArray<BlockPass__blockPassesBookedByUserResultValue0Struct>();
  }

  try_blockPassesBookedByUser(
    _user: Address,
  ): ethereum.CallResult<
    Array<BlockPass__blockPassesBookedByUserResultValue0Struct>
  > {
    let result = super.tryCall(
      "blockPassesBookedByUser",
      "blockPassesBookedByUser(address):((address,string,string,uint256,uint256,uint256,uint256,uint256,uint256,bool)[])",
      [ethereum.Value.fromAddress(_user)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<BlockPass__blockPassesBookedByUserResultValue0Struct>(),
    );
  }

  bookedPassByUser(
    param0: Address,
    param1: BigInt,
  ): BlockPass__bookedPassByUserResult {
    let result = super.call(
      "bookedPassByUser",
      "bookedPassByUser(address,uint256):(address,string,string,uint256,uint256,uint256,uint256,uint256,uint256,bool)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );

    return new BlockPass__bookedPassByUserResult(
      result[0].toAddress(),
      result[1].toString(),
      result[2].toString(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBigInt(),
      result[8].toBigInt(),
      result[9].toBoolean(),
    );
  }

  try_bookedPassByUser(
    param0: Address,
    param1: BigInt,
  ): ethereum.CallResult<BlockPass__bookedPassByUserResult> {
    let result = super.tryCall(
      "bookedPassByUser",
      "bookedPassByUser(address,uint256):(address,string,string,uint256,uint256,uint256,uint256,uint256,uint256,bool)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new BlockPass__bookedPassByUserResult(
        value[0].toAddress(),
        value[1].toString(),
        value[2].toString(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBigInt(),
        value[8].toBigInt(),
        value[9].toBoolean(),
      ),
    );
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getByCategory(
    _category: string,
  ): Array<BlockPass__getByCategoryResultValue0Struct> {
    let result = super.call(
      "getByCategory",
      "getByCategory(string):((address,string,string,uint256,uint256,uint256,uint256,uint256,uint256,bool)[])",
      [ethereum.Value.fromString(_category)],
    );

    return result[0].toTupleArray<BlockPass__getByCategoryResultValue0Struct>();
  }

  try_getByCategory(
    _category: string,
  ): ethereum.CallResult<Array<BlockPass__getByCategoryResultValue0Struct>> {
    let result = super.tryCall(
      "getByCategory",
      "getByCategory(string):((address,string,string,uint256,uint256,uint256,uint256,uint256,uint256,bool)[])",
      [ethereum.Value.fromString(_category)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<BlockPass__getByCategoryResultValue0Struct>(),
    );
  }

  getPassById(param0: BigInt): BlockPass__getPassByIdResult {
    let result = super.call(
      "getPassById",
      "getPassById(uint256):(address,string,string,uint256,uint256,uint256,uint256,uint256,uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return new BlockPass__getPassByIdResult(
      result[0].toAddress(),
      result[1].toString(),
      result[2].toString(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBigInt(),
      result[8].toBigInt(),
      result[9].toBoolean(),
    );
  }

  try_getPassById(
    param0: BigInt,
  ): ethereum.CallResult<BlockPass__getPassByIdResult> {
    let result = super.tryCall(
      "getPassById",
      "getPassById(uint256):(address,string,string,uint256,uint256,uint256,uint256,uint256,uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new BlockPass__getPassByIdResult(
        value[0].toAddress(),
        value[1].toString(),
        value[2].toString(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBigInt(),
        value[8].toBigInt(),
        value[9].toBoolean(),
      ),
    );
  }

  getUserTokens(_user: Address): Array<BigInt> {
    let result = super.call(
      "getUserTokens",
      "getUserTokens(address):(uint256[])",
      [ethereum.Value.fromAddress(_user)],
    );

    return result[0].toBigIntArray();
  }

  try_getUserTokens(_user: Address): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getUserTokens",
      "getUserTokens(address):(uint256[])",
      [ethereum.Value.fromAddress(_user)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)],
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  s_priceFeed(): Address {
    let result = super.call("s_priceFeed", "s_priceFeed():(address)", []);

    return result[0].toAddress();
  }

  try_s_priceFeed(): ethereum.CallResult<Address> {
    let result = super.tryCall("s_priceFeed", "s_priceFeed():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)],
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenOfOwnerByIndex(param0: Address, param1: BigInt): BigInt {
    let result = super.call(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );

    return result[0].toBigInt();
  }

  try_tokenOfOwnerByIndex(
    param0: Address,
    param1: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get initial_owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get priceFeedAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class CreateNewPassCall extends ethereum.Call {
  get inputs(): CreateNewPassCall__Inputs {
    return new CreateNewPassCall__Inputs(this);
  }

  get outputs(): CreateNewPassCall__Outputs {
    return new CreateNewPassCall__Outputs(this);
  }
}

export class CreateNewPassCall__Inputs {
  _call: CreateNewPassCall;

  constructor(call: CreateNewPassCall) {
    this._call = call;
  }

  get _max_pass_count(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _startTime(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _salesEndTime(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _initialPassPrice(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _metadata(): string {
    return this._call.inputValues[4].value.toString();
  }

  get _category(): string {
    return this._call.inputValues[5].value.toString();
  }
}

export class CreateNewPassCall__Outputs {
  _call: CreateNewPassCall;

  constructor(call: CreateNewPassCall) {
    this._call = call;
  }
}

export class PurchasePassCall extends ethereum.Call {
  get inputs(): PurchasePassCall__Inputs {
    return new PurchasePassCall__Inputs(this);
  }

  get outputs(): PurchasePassCall__Outputs {
    return new PurchasePassCall__Outputs(this);
  }
}

export class PurchasePassCall__Inputs {
  _call: PurchasePassCall;

  constructor(call: PurchasePassCall) {
    this._call = call;
  }

  get _blockPassId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class PurchasePassCall__Outputs {
  _call: PurchasePassCall;

  constructor(call: PurchasePassCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdatePriceFeedAddressCall extends ethereum.Call {
  get inputs(): UpdatePriceFeedAddressCall__Inputs {
    return new UpdatePriceFeedAddressCall__Inputs(this);
  }

  get outputs(): UpdatePriceFeedAddressCall__Outputs {
    return new UpdatePriceFeedAddressCall__Outputs(this);
  }
}

export class UpdatePriceFeedAddressCall__Inputs {
  _call: UpdatePriceFeedAddressCall;

  constructor(call: UpdatePriceFeedAddressCall) {
    this._call = call;
  }

  get _newPriceFeedAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdatePriceFeedAddressCall__Outputs {
  _call: UpdatePriceFeedAddressCall;

  constructor(call: UpdatePriceFeedAddressCall) {
    this._call = call;
  }
}
