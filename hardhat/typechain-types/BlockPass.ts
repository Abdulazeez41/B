/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace BlockPass {
  export type BlockPassDetailsStruct = {
    organizer: string;
    metadata: string;
    category: string;
    blockPassId: BigNumberish;
    passesSold: BigNumberish;
    max_passes: BigNumberish;
    passPrice: BigNumberish;
    startTime: BigNumberish;
    salesEndTime: BigNumberish;
    bpEnded: boolean;
  };

  export type BlockPassDetailsStructOutput = [
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean
  ] & {
    organizer: string;
    metadata: string;
    category: string;
    blockPassId: BigNumber;
    passesSold: BigNumber;
    max_passes: BigNumber;
    passPrice: BigNumber;
    startTime: BigNumber;
    salesEndTime: BigNumber;
    bpEnded: boolean;
  };
}

export interface BlockPassInterface extends utils.Interface {
  contractName: "BlockPass";
  functions: {
    "allBlockPassList()": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "blockPassList(uint256)": FunctionFragment;
    "blockPassesBookedByUser(address)": FunctionFragment;
    "bookedPassByUser(address,uint256)": FunctionFragment;
    "createNewPass(uint256,uint256,uint256,uint256,string,string)": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "getByCategory(string)": FunctionFragment;
    "getPassById(uint256)": FunctionFragment;
    "getUserTokens(address)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "name()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "purchasePass(uint256)": FunctionFragment;
    "s_priceFeed()": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenOfOwnerByIndex(address,uint256)": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "allBlockPassList",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "blockPassList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "blockPassesBookedByUser",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "bookedPassByUser",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createNewPass",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getByCategory",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPassById",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserTokens",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "purchasePass",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "s_priceFeed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenOfOwnerByIndex",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "allBlockPassList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "blockPassList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "blockPassesBookedByUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bookedPassByUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createNewPass",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getByCategory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPassById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "purchasePass",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "s_priceFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenOfOwnerByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "blockPassCreated(address,uint256,uint256)": EventFragment;
    "passBooked(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "blockPassCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "passBooked"): EventFragment;
}

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  { owner: string; approved: string; tokenId: BigNumber }
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  { owner: string; operator: string; approved: boolean }
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  { from: string; to: string; tokenId: BigNumber }
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export type blockPassCreatedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { organizer: string; creationTime: BigNumber; blockPassId: BigNumber }
>;

export type blockPassCreatedEventFilter =
  TypedEventFilter<blockPassCreatedEvent>;

export type passBookedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { buyer: string; tokenId: BigNumber; blockPassId: BigNumber }
>;

export type passBookedEventFilter = TypedEventFilter<passBookedEvent>;

export interface BlockPass extends BaseContract {
  contractName: "BlockPass";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BlockPassInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    allBlockPassList(
      overrides?: CallOverrides
    ): Promise<[BlockPass.BlockPassDetailsStructOutput[]]>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    blockPassList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        organizer: string;
        metadata: string;
        category: string;
        blockPassId: BigNumber;
        passesSold: BigNumber;
        max_passes: BigNumber;
        passPrice: BigNumber;
        startTime: BigNumber;
        salesEndTime: BigNumber;
        bpEnded: boolean;
      }
    >;

    blockPassesBookedByUser(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BlockPass.BlockPassDetailsStructOutput[]]>;

    bookedPassByUser(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        organizer: string;
        metadata: string;
        category: string;
        blockPassId: BigNumber;
        passesSold: BigNumber;
        max_passes: BigNumber;
        passPrice: BigNumber;
        startTime: BigNumber;
        salesEndTime: BigNumber;
        bpEnded: boolean;
      }
    >;

    createNewPass(
      _max_pass_count: BigNumberish,
      _startTime: BigNumberish,
      _salesEndTime: BigNumberish,
      _initialPassPrice: BigNumberish,
      _metadata: string,
      _category: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getByCategory(
      _category: string,
      overrides?: CallOverrides
    ): Promise<[BlockPass.BlockPassDetailsStructOutput[]]>;

    getPassById(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        organizer: string;
        metadata: string;
        category: string;
        blockPassId: BigNumber;
        passesSold: BigNumber;
        max_passes: BigNumber;
        passPrice: BigNumber;
        startTime: BigNumber;
        salesEndTime: BigNumber;
        bpEnded: boolean;
      }
    >;

    getUserTokens(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    purchasePass(
      _blockPassId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    s_priceFeed(overrides?: CallOverrides): Promise<[string]>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tokenOfOwnerByIndex(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  allBlockPassList(
    overrides?: CallOverrides
  ): Promise<BlockPass.BlockPassDetailsStructOutput[]>;

  approve(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  blockPassList(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean
    ] & {
      organizer: string;
      metadata: string;
      category: string;
      blockPassId: BigNumber;
      passesSold: BigNumber;
      max_passes: BigNumber;
      passPrice: BigNumber;
      startTime: BigNumber;
      salesEndTime: BigNumber;
      bpEnded: boolean;
    }
  >;

  blockPassesBookedByUser(
    _user: string,
    overrides?: CallOverrides
  ): Promise<BlockPass.BlockPassDetailsStructOutput[]>;

  bookedPassByUser(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean
    ] & {
      organizer: string;
      metadata: string;
      category: string;
      blockPassId: BigNumber;
      passesSold: BigNumber;
      max_passes: BigNumber;
      passPrice: BigNumber;
      startTime: BigNumber;
      salesEndTime: BigNumber;
      bpEnded: boolean;
    }
  >;

  createNewPass(
    _max_pass_count: BigNumberish,
    _startTime: BigNumberish,
    _salesEndTime: BigNumberish,
    _initialPassPrice: BigNumberish,
    _metadata: string,
    _category: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getApproved(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getByCategory(
    _category: string,
    overrides?: CallOverrides
  ): Promise<BlockPass.BlockPassDetailsStructOutput[]>;

  getPassById(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean
    ] & {
      organizer: string;
      metadata: string;
      category: string;
      blockPassId: BigNumber;
      passesSold: BigNumber;
      max_passes: BigNumber;
      passPrice: BigNumber;
      startTime: BigNumber;
      salesEndTime: BigNumber;
      bpEnded: boolean;
    }
  >;

  getUserTokens(_user: string, overrides?: CallOverrides): Promise<BigNumber[]>;

  isApprovedForAll(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  name(overrides?: CallOverrides): Promise<string>;

  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  purchasePass(
    _blockPassId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  s_priceFeed(overrides?: CallOverrides): Promise<string>;

  "safeTransferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tokenOfOwnerByIndex(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    allBlockPassList(
      overrides?: CallOverrides
    ): Promise<BlockPass.BlockPassDetailsStructOutput[]>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    blockPassList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        organizer: string;
        metadata: string;
        category: string;
        blockPassId: BigNumber;
        passesSold: BigNumber;
        max_passes: BigNumber;
        passPrice: BigNumber;
        startTime: BigNumber;
        salesEndTime: BigNumber;
        bpEnded: boolean;
      }
    >;

    blockPassesBookedByUser(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BlockPass.BlockPassDetailsStructOutput[]>;

    bookedPassByUser(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        organizer: string;
        metadata: string;
        category: string;
        blockPassId: BigNumber;
        passesSold: BigNumber;
        max_passes: BigNumber;
        passPrice: BigNumber;
        startTime: BigNumber;
        salesEndTime: BigNumber;
        bpEnded: boolean;
      }
    >;

    createNewPass(
      _max_pass_count: BigNumberish,
      _startTime: BigNumberish,
      _salesEndTime: BigNumberish,
      _initialPassPrice: BigNumberish,
      _metadata: string,
      _category: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getByCategory(
      _category: string,
      overrides?: CallOverrides
    ): Promise<BlockPass.BlockPassDetailsStructOutput[]>;

    getPassById(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        organizer: string;
        metadata: string;
        category: string;
        blockPassId: BigNumber;
        passesSold: BigNumber;
        max_passes: BigNumber;
        passPrice: BigNumber;
        startTime: BigNumber;
        salesEndTime: BigNumber;
        bpEnded: boolean;
      }
    >;

    getUserTokens(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    name(overrides?: CallOverrides): Promise<string>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    purchasePass(
      _blockPassId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    s_priceFeed(overrides?: CallOverrides): Promise<string>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokenOfOwnerByIndex(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalEventFilter;

    "ApprovalForAll(address,address,bool)"(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TransferEventFilter;

    "blockPassCreated(address,uint256,uint256)"(
      organizer?: string | null,
      creationTime?: BigNumberish | null,
      blockPassId?: null
    ): blockPassCreatedEventFilter;
    blockPassCreated(
      organizer?: string | null,
      creationTime?: BigNumberish | null,
      blockPassId?: null
    ): blockPassCreatedEventFilter;

    "passBooked(address,uint256,uint256)"(
      buyer?: string | null,
      tokenId?: null,
      blockPassId?: null
    ): passBookedEventFilter;
    passBooked(
      buyer?: string | null,
      tokenId?: null,
      blockPassId?: null
    ): passBookedEventFilter;
  };

  estimateGas: {
    allBlockPassList(overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    blockPassList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    blockPassesBookedByUser(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bookedPassByUser(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createNewPass(
      _max_pass_count: BigNumberish,
      _startTime: BigNumberish,
      _salesEndTime: BigNumberish,
      _initialPassPrice: BigNumberish,
      _metadata: string,
      _category: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getByCategory(
      _category: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPassById(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserTokens(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    purchasePass(
      _blockPassId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    s_priceFeed(overrides?: CallOverrides): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allBlockPassList(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    blockPassList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    blockPassesBookedByUser(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bookedPassByUser(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createNewPass(
      _max_pass_count: BigNumberish,
      _startTime: BigNumberish,
      _salesEndTime: BigNumberish,
      _initialPassPrice: BigNumberish,
      _metadata: string,
      _category: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getByCategory(
      _category: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPassById(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserTokens(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    purchasePass(
      _blockPassId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    s_priceFeed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenOfOwnerByIndex(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
